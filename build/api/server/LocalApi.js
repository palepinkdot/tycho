"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const tslib_1=require("tslib"),electron_1=require("electron"),fast_folder_size_1=(0,tslib_1.__importDefault)(require("fast-folder-size")),service_helpers_1=require("../../helpers/service-helpers"),debug=require("debug")("Ferdi:LocalApi");class LocalApi{getAppSettings(e){return new Promise((r=>{electron_1.ipcRenderer.once("appSettings",((e,t)=>{debug("LocalApi::getAppSettings resolves",t.type,t.data),r(t)})),electron_1.ipcRenderer.send("getAppSettings",e)}))}async updateAppSettings(e,r){debug("LocalApi::updateAppSettings resolves",e,r),electron_1.ipcRenderer.send("updateAppSettings",{type:e,data:r})}async getAppCacheSize(){const e=(0,service_helpers_1.getServicePartitionsDirectory)();return new Promise(((r,t)=>{(0,fast_folder_size_1.default)(e,((e,s)=>{e&&t(e),debug("LocalApi::getAppCacheSize resolves",s),r(s)}))}))}async clearCache(e=null){return electron_1.ipcRenderer.send("clear-storage-data",{serviceId:e,targetsToClear:{storages:["appcache","filesystem","indexdb","shadercache","websql","serviceworkers","cachestorage"],quotas:["temporary","persistent","syncable"]}}),electron_1.ipcRenderer.invoke("clear-cache",{serviceId:e})}}exports.default=LocalApi;