"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const tslib_1=require("tslib"),electron_1=require("electron"),fs_extra_1=require("fs-extra"),path_1=require("path"),electron_window_state_1=(0,tslib_1.__importDefault)(require("electron-window-state")),ms_1=(0,tslib_1.__importDefault)(require("ms")),electron_util_1=require("./electron-util"),enforce_macos_app_location_1=require("./enforce-macos-app-location");(0,electron_util_1.initializeRemote)();const config_1=require("./config"),environment_1=require("./environment"),environment_remote_1=require("./environment-remote"),jsUtils_1=require("./jsUtils"),basicAuth_1=require("./features/basicAuth"),ipc_api_1=(0,tslib_1.__importDefault)(require("./electron/ipc-api")),Tray_1=(0,tslib_1.__importDefault)(require("./lib/Tray")),DBus_1=(0,tslib_1.__importDefault)(require("./lib/DBus")),Settings_1=(0,tslib_1.__importDefault)(require("./electron/Settings")),deepLinking_1=(0,tslib_1.__importDefault)(require("./electron/deepLinking")),windowUtils_1=require("./electron/windowUtils"),package_json_1=require("./package.json");require("./electron/exception");const asar_helpers_1=require("./helpers/asar-helpers"),url_helpers_1=require("./helpers/url-helpers"),userAgent_helpers_1=(0,tslib_1.__importDefault)(require("./helpers/userAgent-helpers")),debug=require("debug")("Ferdi:App");let mainWindow;debug("Set userAgent to ",(0,userAgent_helpers_1.default)()),electron_1.app.userAgentFallback=(0,userAgent_helpers_1.default)();let willQuitApp=!1,onDidLoadFns=[];function onDidLoad(e){onDidLoadFns?onDidLoadFns.push(e):mainWindow&&e(mainWindow)}(0,fs_extra_1.emptyDirSync)((0,environment_remote_1.userDataRecipesPath)("temp")),(0,fs_extra_1.ensureFileSync)((0,environment_remote_1.userDataPath)("window-state.json")),environment_1.isWindows&&electron_1.app.setAppUserModelId(package_json_1.appId);const settings=new Settings_1.default("app",config_1.DEFAULT_APP_SETTINGS),proxySettings=new Settings_1.default("proxy"),retrieveSettingValue=(e,i)=>(0,jsUtils_1.ifUndefinedBoolean)(settings.get(e),i);retrieveSettingValue("sentry",config_1.DEFAULT_APP_SETTINGS.sentry)&&require("./sentry");const liftSingleInstanceLock=retrieveSettingValue("liftSingleInstanceLock",!1),gotTheLock=!!liftSingleInstanceLock||electron_1.app.requestSingleInstanceLock();gotTheLock?electron_1.app.on("second-instance",((e,i)=>{mainWindow&&(mainWindow.isVisible()||mainWindow.show(),mainWindow.isMinimized()&&mainWindow.restore(),mainWindow.focus(),environment_1.isWindows&&onDidLoad((e=>{const n=i.slice(1);n&&(0,deepLinking_1.default)(e,n.toString()),i.includes("--reset-window")?setTimeout((()=>{debug("Resetting windows via Task"),e.setPosition(config_1.DEFAULT_WINDOW_OPTIONS.x+100,config_1.DEFAULT_WINDOW_OPTIONS.y+100),e.setSize(config_1.DEFAULT_WINDOW_OPTIONS.width,config_1.DEFAULT_WINDOW_OPTIONS.height)}),1):i.includes("--quit")&&setTimeout((()=>{debug("Quitting Ferdi via Task"),electron_1.app.quit()}),1)})))})):electron_1.app.quit(),environment_1.isLinux&&process.env.XDG_CURRENT_DESKTOP&&["Pantheon","Unity:Unity7"].includes(process.env.XDG_CURRENT_DESKTOP)&&(process.env.XDG_CURRENT_DESKTOP="Unity"),retrieveSettingValue("enableGPUAcceleration",!1)||(debug("Disable GPU Acceleration"),electron_1.app.disableHardwareAcceleration()),electron_1.app.setAboutPanelOptions({applicationVersion:(0,environment_remote_1.aboutAppDetails)(),version:""});const createWindow=()=>{const e=(0,electron_window_state_1.default)({defaultWidth:config_1.DEFAULT_WINDOW_OPTIONS.width,defaultHeight:config_1.DEFAULT_WINDOW_OPTIONS.height,maximize:!0,fullScreen:!0});let i=e.x||config_1.DEFAULT_WINDOW_OPTIONS.x,n=e.y||config_1.DEFAULT_WINDOW_OPTIONS.y;(0,windowUtils_1.isPositionValid)({x:i,y:n})||(debug("Window is out of screen bounds, resetting window"),i=config_1.DEFAULT_WINDOW_OPTIONS.x,n=config_1.DEFAULT_WINDOW_OPTIONS.y);const t=retrieveSettingValue("darkMode",!1)?"#1E1E1E":settings.get("accentColor");mainWindow=new electron_1.BrowserWindow({x:i,y:n,width:e.width,height:e.height,minWidth:600,minHeight:500,show:!1,titleBarStyle:environment_1.isMac?"hidden":"default",frame:environment_1.isLinux,backgroundColor:t,webPreferences:{spellcheck:retrieveSettingValue("enableSpellchecking",config_1.DEFAULT_APP_SETTINGS.enableSpellchecking),nodeIntegration:!0,contextIsolation:!1,webviewTag:!0,preload:(0,path_1.join)(__dirname,"sentry.js"),nativeWindowOpen:!0,enableRemoteModule:!0}}),electron_1.app.on("web-contents-created",((e,i)=>{"webview"===i.getType()&&i.on("new-window",(e=>{e.preventDefault()}))})),mainWindow.webContents.on("did-finish-load",(()=>{const e=onDidLoadFns;if(onDidLoadFns=null,e)for(const i of e)i(mainWindow)}));const o=new Tray_1.default,r=new DBus_1.default(o);if((0,ipc_api_1.default)({mainWindow:mainWindow,settings:{app:settings,proxy:proxySettings},trayIcon:o}),r.start(),e.manage(mainWindow),mainWindow.loadURL(`file://${__dirname}/index.html`),(environment_remote_1.isDevMode||process.argv.includes("--devtools"))&&mainWindow.webContents.openDevTools(),environment_1.isWindows&&onDidLoad((e=>{const i=process.argv.slice(1);i&&(0,deepLinking_1.default)(e,i.toString())})),mainWindow.on("close",(e=>{debug("Window: close window"),!willQuitApp&&retrieveSettingValue("runInBackground",config_1.DEFAULT_APP_SETTINGS.runInBackground)?(e.preventDefault(),environment_1.isWindows?(debug("Window: minimize"),mainWindow?.minimize(),retrieveSettingValue("closeToSystemTray",config_1.DEFAULT_APP_SETTINGS.closeToSystemTray)&&(debug("Skip taskbar: true"),mainWindow?.setSkipTaskbar(!0))):environment_1.isMac&&mainWindow?.isFullScreen()?(debug("Window: leaveFullScreen and hide"),mainWindow.once("show",(()=>mainWindow?.setFullScreen(!0))),mainWindow.once("leave-full-screen",(()=>mainWindow?.hide())),mainWindow.setFullScreen(!1)):(debug("Window: hide"),mainWindow?.hide())):(r.stop(),electron_1.app.quit())})),mainWindow.on("minimize",(()=>{electron_1.app.wasMaximized=electron_1.app.isMaximized,retrieveSettingValue("minimizeToSystemTray",config_1.DEFAULT_APP_SETTINGS.minimizeToSystemTray)&&(debug("Skip taskbar: true"),mainWindow?.setSkipTaskbar(!0),o.show())})),mainWindow.on("maximize",(()=>{debug("Window: maximize"),electron_1.app.isMaximized=!0})),mainWindow.on("unmaximize",(()=>{debug("Window: unmaximize"),electron_1.app.isMaximized=!1})),mainWindow.on("restore",(()=>{debug("Window: restore"),mainWindow?.setSkipTaskbar(!1),electron_1.app.wasMaximized&&(debug("Window: was maximized before, maximize window"),mainWindow?.maximize()),retrieveSettingValue("enableSystemTray",config_1.DEFAULT_APP_SETTINGS.enableSystemTray)||(debug("Tray: hiding tray icon"),o.hide())})),environment_1.isMac){const{askFormacOSPermissions:e}=require("./electron/macOSPermissions");setTimeout((()=>e(mainWindow)),(0,ms_1.default)("30s"))}mainWindow.on("show",(()=>{debug("Skip taskbar: true"),mainWindow?.setSkipTaskbar(!1)})),electron_1.app.isMaximized=mainWindow.isMaximized(),mainWindow.webContents.on("new-window",((e,i)=>{e.preventDefault(),(0,url_helpers_1.openExternalUrl)(i)})),retrieveSettingValue("startMinimized",config_1.DEFAULT_APP_SETTINGS.startMinimized)?mainWindow.hide():mainWindow.show(),electron_1.app.whenReady().then((()=>{retrieveSettingValue("enableGlobalHideShortcut",config_1.DEFAULT_APP_SETTINGS.enableGlobalHideShortcut)&&electron_1.globalShortcut.register(`${(0,environment_1.altKey)()}+X`,(()=>{o._toggleWindow()}))}))},argv=require("minimist")(process.argv.slice(1));argv["auth-server-whitelist"]&&electron_1.app.commandLine.appendSwitch("auth-server-whitelist",argv["auth-server-whitelist"]),argv["auth-negotiate-delegate-whitelist"]&&electron_1.app.commandLine.appendSwitch("auth-negotiate-delegate-whitelist",argv["auth-negotiate-delegate-whitelist"]),electron_1.app.commandLine.appendSwitch("disable-features","HardwareMediaKeyHandling,MediaSessionService,CrossOriginOpenerPolicy"),electron_1.app.on("ready",(()=>{(0,enforce_macos_app_location_1.enforceMacOSAppLocation)();const e=environment_remote_1.isDevMode?"ferdi-dev":"ferdi";if(electron_1.app.isDefaultProtocolClient(e,process.execPath)||electron_1.app.setAsDefaultProtocolClient(e,process.execPath),environment_1.isWindows){const e=environment_remote_1.isDevMode?`${__dirname} `:"",i=(0,asar_helpers_1.asarPath)((0,path_1.join)(environment_remote_1.isDevMode?`${__dirname}../src/`:__dirname,"assets/images/taskbar/win32/display.ico"));electron_1.app.setUserTasks([{program:process.execPath,arguments:`${e}--reset-window`,iconPath:i,iconIndex:0,title:"Move Ferdi to Current Display",description:"Restore the position and size of Ferdi"},{program:process.execPath,arguments:`${e}--quit`,iconPath:i,iconIndex:0,title:"Quit Ferdi",description:""}])}require("electron-react-titlebar/main").initialize(),createWindow()}));const noop=()=>null;let authCallback=noop;electron_1.app.on("login",((e,i,n,t,o)=>{authCallback=o,debug("browser login event",t),e.preventDefault(),t.isProxy||"basic"!==t.scheme||(debug("basic auth handler",t),(0,basicAuth_1.mainIpcHandler)(mainWindow,t))})),electron_1.ipcMain.on("feature-basic-auth-credentials",((e,{user:i,password:n})=>{debug("Received basic auth credentials",i,"********"),authCallback(i,n),authCallback=noop})),electron_1.ipcMain.on("open-browser-window",((e,{url:i,serviceId:n})=>{const t=electron_1.session.fromPartition(`persist:service-${n}`),o=new electron_1.BrowserWindow({parent:mainWindow,fullscreenable:!1,webPreferences:{session:t,nativeWindowOpen:!0}});o.show(),o.loadURL(i),debug("Received open-browser-window",i)})),electron_1.ipcMain.on("modifyRequestHeaders",((e,{modifiedRequestHeaders:i,serviceId:n})=>{debug(`Received modifyRequestHeaders ${i} for serviceId ${n}`);for(const e of i){const{headers:i,requestFilters:t}=e;electron_1.session.fromPartition(`persist:service-${n}`).webRequest.onBeforeSendHeaders(t,((e,n)=>{for(const n in i)if(Object.prototype.hasOwnProperty.call(i,n)){const t=i[n];e.requestHeaders[n]=t}n({requestHeaders:e.requestHeaders})}))}})),electron_1.ipcMain.on("knownCertificateHosts",((e,{knownHosts:i,serviceId:n})=>{debug(`Received knownCertificateHosts ${i} for serviceId ${n}`),electron_1.session.fromPartition(`persist:service-${n}`).setCertificateVerifyProc(((e,n)=>{const{hostname:t}=e;i.find((e=>e.includes(t))).length>0?n(0):n(-2)}))})),electron_1.ipcMain.on("feature-basic-auth-cancel",(()=>{debug("Cancel basic auth"),authCallback(null),authCallback=noop})),electron_1.ipcMain.on("find-in-page",((e,i,n)=>{const{sender:t}=e;if(t!==mainWindow?.webContents&&"string"==typeof i){const o={};for(const e of["forward","findNext","matchCase"])e in n&&(o[e]=!!n[e]);const r=t.findInPage(i,o);debug("Find in page",i,n,r),e.returnValue=r}else e.returnValue=null})),electron_1.ipcMain.on("stop-find-in-page",((e,i)=>{const{sender:n}=e;if(n!==mainWindow?.webContents){["clearSelection","keepSelection","activateSelection"].includes(i)&&n.stopFindInPage(i)}e.returnValue=null})),electron_1.ipcMain.on("set-spellchecker-locales",((e,{locale:i,serviceId:n})=>{if(void 0===n)return;const t=electron_1.session.fromPartition(`persist:service-${n}`),[o]=t.getSpellCheckerLanguages();debug(`Spellchecker default locale is: ${o}`);const r=[i,o,config_1.DEFAULT_APP_SETTINGS.fallbackLocale];debug(`Setting spellchecker locales to: ${r}`),t.setSpellCheckerLanguages(r)})),electron_1.ipcMain.on("window.toolbar-double-clicked",(()=>{mainWindow?.isMaximized()?mainWindow.unmaximize():mainWindow?.maximize()})),electron_1.app.on("window-all-closed",(()=>{retrieveSettingValue("runInBackground",config_1.DEFAULT_APP_SETTINGS.runInBackground)?(debug("Window: all windows closed, quit app"),electron_1.app.quit()):debug("Window: don't quit app")})),electron_1.app.on("before-quit",(e=>{let i=0;retrieveSettingValue("confirmOnQuit",config_1.DEFAULT_APP_SETTINGS.confirmOnQuit)&&(i=electron_1.dialog.showMessageBoxSync(mainWindow,{type:"question",message:"Quit",detail:"Do you really want to quit Ferdi?",buttons:["Yes","No"]})),0===i?willQuitApp=!0:e.preventDefault()})),electron_1.app.on("activate",(()=>{null===mainWindow?createWindow():mainWindow?.show()})),electron_1.app.on("web-contents-created",((e,i)=>{i.on("new-window",((e,i,n,t)=>{"foreground-tab"===t&&e.preventDefault()}))})),electron_1.app.on("will-finish-launching",(()=>{electron_1.app.on("open-url",((e,i)=>{e.preventDefault(),onDidLoad((e=>{debug("open-url event",i),(0,deepLinking_1.default)(e,i)}))}))}));