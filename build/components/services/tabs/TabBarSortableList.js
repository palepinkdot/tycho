"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=require("react"),_mobxReact=require("mobx-react"),_propTypes=_interopRequireDefault(require("prop-types")),_reactSortableHoc=require("react-sortable-hoc"),_TabItem=_interopRequireDefault(require("./TabItem")),_jsxRuntime=require("react/jsx-runtime");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}class TabBarSortableList extends _react.Component{render(){const{services:e,setActive:r,reload:i,toggleNotifications:t,toggleAudio:s,toggleDarkMode:a,deleteService:d,disableService:o,enableService:u,hibernateService:c,wakeUpService:p,openSettings:l,showMessageBadgeWhenMutedSetting:n,showServiceNameSetting:v,showMessageBadgesEvenWhenMuted:f}=this.props;return(0,_jsxRuntime.jsx)("ul",{className:"tabs",children:e.map(((e,g)=>(0,_jsxRuntime.jsx)(_TabItem.default,{clickHandler:()=>r({serviceId:e.id}),service:e,index:g,shortcutIndex:g+1,reload:()=>i({serviceId:e.id}),toggleNotifications:()=>t({serviceId:e.id}),toggleAudio:()=>s({serviceId:e.id}),toggleDarkMode:()=>a({serviceId:e.id}),deleteService:()=>d({serviceId:e.id}),disableService:()=>o({serviceId:e.id}),enableService:()=>u({serviceId:e.id}),hibernateService:()=>c({serviceId:e.id}),wakeUpService:()=>p({serviceId:e.id}),openSettings:l,showMessageBadgeWhenMutedSetting:n,showMessageBadgesEvenWhenMuted:f,showServiceNameSetting:v},e.id)))})}}TabBarSortableList.propTypes={services:_mobxReact.PropTypes.arrayOrObservableArray.isRequired,setActive:_propTypes.default.func.isRequired,openSettings:_propTypes.default.func.isRequired,reload:_propTypes.default.func.isRequired,toggleNotifications:_propTypes.default.func.isRequired,toggleAudio:_propTypes.default.func.isRequired,toggleDarkMode:_propTypes.default.func.isRequired,deleteService:_propTypes.default.func.isRequired,disableService:_propTypes.default.func.isRequired,enableService:_propTypes.default.func.isRequired,hibernateService:_propTypes.default.func.isRequired,wakeUpService:_propTypes.default.func.isRequired,showMessageBadgeWhenMutedSetting:_propTypes.default.bool.isRequired,showServiceNameSetting:_propTypes.default.bool.isRequired,showMessageBadgesEvenWhenMuted:_propTypes.default.bool.isRequired};var _default=(0,_reactSortableHoc.SortableContainer)((0,_mobxReact.observer)(TabBarSortableList));exports.default=_default;