"use strict";const Workspace=use("App/Models/Workspace"),{validateAll:validateAll}=use("Validator"),{v4:uuid}=require("uuid");class WorkspaceController{async create({request:e,response:s}){const a=await validateAll(e.all(),{name:"required"});if(a.fails())return s.status(401).send({message:"Invalid POST arguments",messages:a.messages(),status:401});const r=e.all();let t;do{t=uuid()}while((await Workspace.query().where("workspaceId",t).fetch()).rows.length>0);const i=(await Workspace.all()).rows.length,{name:n}=r;return delete r.name,await Workspace.create({workspaceId:t,name:n,order:i,services:JSON.stringify([]),data:JSON.stringify(r)}),s.send({userId:1,name:n,id:t,order:i,workspaces:[]})}async edit({request:e,response:s,params:a}){const r=await validateAll(e.all(),{name:"required"});if(r.fails())return s.status(401).send({message:"Invalid POST arguments",messages:r.messages(),status:401});const t=e.all(),{id:i}=a;await Workspace.query().where("workspaceId",i).update({name:t.name,services:JSON.stringify(t.services)});const n=(await Workspace.query().where("workspaceId",i).fetch()).rows[0];return s.send({id:n.workspaceId,name:t.name,order:n.order,services:t.services,userId:1})}async delete({request:e,response:s,params:a}){const r=await validateAll(a,{id:"required"});if(r.fails())return s.status(401).send({message:"Invalid arguments",messages:r.messages(),status:401});const{id:t}=a;return await Workspace.query().where("workspaceId",t).delete(),s.send({message:"Successfully deleted workspace"})}async list({response:e}){const s=(await Workspace.all()).rows;let a=[];return s&&(a=s.map((e=>({id:e.workspaceId,name:e.name,order:e.order,services:"string"==typeof e.services?JSON.parse(e.services):e.services,userId:1})))),e.send(a)}}module.exports=WorkspaceController;