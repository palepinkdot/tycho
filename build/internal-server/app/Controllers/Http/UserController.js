"use strict";const User=use("App/Models/User"),Service=use("App/Models/Service"),Workspace=use("App/Models/Workspace"),{validateAll:validateAll}=use("Validator"),btoa=require("btoa"),fetch=require("node-fetch"),{v4:uuid}=require("uuid"),crypto=require("crypto"),{DEFAULT_APP_SETTINGS:DEFAULT_APP_SETTINGS}=require("../../../../config"),{API_VERSION:API_VERSION}=require("../../../../environment-remote"),{default:userAgent}=require("../../../../helpers/userAgent-helpers"),apiRequest=(e,t,s,r)=>new Promise(((a,i)=>{try{fetch(`${e}/${API_VERSION}/${t}`,{method:s,headers:{Authorization:`Bearer ${r}`,"User-Agent":userAgent()}}).then((e=>e.json())).then((e=>a(e)))}catch{i()}})),LOGIN_SUCCESS_TOKEN="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJGZXJkaSBJbnRlcm5hbCBTZXJ2ZXIiLCJpYXQiOjE1NzEwNDAyMTUsImV4cCI6MjUzMzk1NDE3ODQ0LCJhdWQiOiJnZXRmZXJkaS5jb20iLCJzdWIiOiJmZXJkaUBsb2NhbGhvc3QiLCJ1c2VySWQiOiIxIn0.9_TWFGp6HROv8Yg82Rt6i1-95jqWym40a-HmgrdMC6M",DEFAULT_USER_DATA={accountType:"individual",beta:!1,email:"",emailValidated:!0,features:{},firstname:"Ferdi",id:"82c1cf9d-ab58-4da2-b55e-aaa41d2142d8",isSubscriptionOwner:!0,lastname:"Application",locale:DEFAULT_APP_SETTINGS.fallbackLocale};class UserController{async signup({request:e,response:t}){const s=await validateAll(e.all(),{firstname:"required",email:"required|email",password:"required"});return s.fails()?t.status(401).send({message:"Invalid POST arguments",messages:s.messages(),status:401}):t.send({message:"Successfully created account",token:LOGIN_SUCCESS_TOKEN})}async login({request:e,response:t}){return e.header("Authorization")?t.send({message:"Successfully logged in",token:LOGIN_SUCCESS_TOKEN}):t.status(401).send({message:"Please provide authorization",status:401})}async me({response:e}){const t=await User.find(1),s="string"==typeof t.settings?JSON.parse(t.settings):t.settings;return e.send({...DEFAULT_USER_DATA,...s})}async updateMe({request:e,response:t}){const s=await User.find(1);let r=s.settings||{};"string"==typeof r&&(r=JSON.parse(r));const a={...r,...e.all()};return s.settings=JSON.stringify(a),await s.save(),t.send({data:{...DEFAULT_USER_DATA,...a},status:["data-updated"]})}async import({request:e,response:t}){const s=await validateAll(e.all(),{email:"required|email",password:"required",server:"required"});if(s.fails()){let e="There was an error while trying to import your account:\n";for(const t of s.messages())"required"===t.validation?e+=`- Please make sure to supply your ${t.field}\n`:"unique"===t.validation?e+="- There is already a user with this email.\n":e+=`${t.message}\n`;return t.status(401).send(e)}const{email:r,password:a,server:i}=e.all(),n=crypto.createHash("sha256").update(a).digest("base64");let o;try{const e=btoa(`${r}:${n}`),s=await fetch(`${i}/${API_VERSION}/auth/login`,{method:"POST",headers:{Authorization:`Basic ${e}`,"User-Agent":userAgent()}}),a=await s.json();if(!a.message||"Successfully logged in"!==a.message){const e="Could not login into Franz with your supplied credentials. Please check and try again";return t.status(401).send(e)}o=a.token}catch(e){return t.status(401).send({message:"Cannot login to Franz",error:e})}let c=!1;try{c=await apiRequest(i,"me","GET",o)}catch(e){const s=`Could not get your user info from Franz. Please check your credentials or try again later.\nError: ${e}`;return t.status(401).send(s)}if(!c){const e="Could not get your user info from Franz. Please check your credentials or try again later";return t.status(401).send(e)}const u={};try{const e=await apiRequest(i,"me/services","GET",o);for(const t of e)await this._createAndCacheService(t,u)}catch(e){const s=`Could not import your services into our system.\nError: ${e}`;return t.status(401).send(s)}try{const e=await apiRequest(i,"workspace","GET",o);for(const t of e)await this._createWorkspace(t,u)}catch(e){const s=`Could not import your workspaces into our system.\nError: ${e}`;return t.status(401).send(s)}return t.send("Your account has been imported. You can now use your Franz account in Ferdi.")}async export({auth:e,response:t}){const s={username:"Ferdi",mail:"internal@getferdi.com",services:(await Service.all()).toJSON(),workspaces:(await Workspace.all()).toJSON()};return t.header("Content-Type","application/force-download").header("Content-disposition","attachment; filename=export.ferdi-data").send(s)}async importFerdi({request:e,response:t}){const s=await validateAll(e.all(),{file:"required"});if(s.fails())return t.send(s.messages());let r;try{r=JSON.parse(e.input("file"))}catch{return t.send("Could not import: Invalid file, could not read file")}if(!r||!r.services||!r.workspaces)return t.send("Could not import: Invalid file (2)");const a={};try{for(const e of r.services)await this._createAndCacheService(e,a)}catch(e){const s=`Could not import your services into our system.\nError: ${e}`;return t.send(s)}try{for(const e of r.workspaces)await this._createWorkspace(e,a)}catch(e){const s=`Could not import your workspaces into our system.\nError: ${e}`;return t.status(401).send(s)}return t.send("Your account has been imported.")}async _createWorkspace(e,t){let s;do{s=uuid()}while((await Workspace.query().where("workspaceId",s).fetch()).rows.length>0);e.services&&"string"==typeof e.services&&e.services.length>0&&(e.services=JSON.parse(e.services));const r=e.services&&"object"==typeof e.services?e.services.map((e=>t[e])):[];e.data&&"string"==typeof e.data&&e.data.length>0&&(e.data=JSON.parse(e.data)),await Workspace.create({workspaceId:s,name:e.name,order:e.order,services:JSON.stringify(r),data:JSON.stringify(e.data||{})})}async _createAndCacheService(e,t){let s;do{s=uuid()}while((await Service.query().where("serviceId",s).fetch()).rows.length>0);t[e.serviceId]=s,e.settings&&"string"==typeof e.settings&&e.settings.length>0&&(e.settings=JSON.parse(e.settings)),await Service.create({serviceId:s,name:e.name,recipeId:e.recipeId,settings:JSON.stringify(e.settings||{})})}}module.exports=UserController;