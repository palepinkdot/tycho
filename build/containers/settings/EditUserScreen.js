"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=require("react"),_propTypes=_interopRequireDefault(require("prop-types")),_mobxReact=require("mobx-react"),_reactIntl=require("react-intl"),_UserStore=_interopRequireDefault(require("../../stores/UserStore")),_Form=_interopRequireDefault(require("../../lib/Form")),_EditUserForm=_interopRequireDefault(require("../../components/settings/user/EditUserForm")),_ErrorBoundary=_interopRequireDefault(require("../../components/util/ErrorBoundary")),_validationHelpers=require("../../helpers/validation-helpers"),_jsxRuntime=require("react/jsx-runtime");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}const messages=(0,_reactIntl.defineMessages)({firstname:{id:"settings.user.form.firstname",defaultMessage:[{type:0,value:"First Name"}]},lastname:{id:"settings.user.form.lastname",defaultMessage:[{type:0,value:"Last Name"}]},email:{id:"settings.user.form.email",defaultMessage:[{type:0,value:"Email"}]},accountTypeLabel:{id:"settings.user.form.accountType.label",defaultMessage:[{type:0,value:"Account type"}]},accountTypeIndividual:{id:"settings.user.form.accountType.individual",defaultMessage:[{type:0,value:"Individual"}]},accountTypeNonProfit:{id:"settings.user.form.accountType.non-profit",defaultMessage:[{type:0,value:"Non-Profit"}]},accountTypeCompany:{id:"settings.user.form.accountType.company",defaultMessage:[{type:0,value:"Company"}]},currentPassword:{id:"settings.user.form.currentPassword",defaultMessage:[{type:0,value:"Current password"}]},newPassword:{id:"settings.user.form.newPassword",defaultMessage:[{type:0,value:"New password"}]}});class EditUserScreen extends _react.Component{componentWillUnmount(){this.props.actions.user.resetStatus()}onSubmit(e){const{update:s}=this.props.actions.user;s({userData:e}),document.querySelector("#form").scrollIntoView({behavior:"smooth"})}prepareForm(e){const{intl:s}=this.props,a={fields:{firstname:{label:s.formatMessage(messages.firstname),placeholder:s.formatMessage(messages.firstname),value:e.firstname,validators:[_validationHelpers.required]},lastname:{label:s.formatMessage(messages.lastname),placeholder:s.formatMessage(messages.lastname),value:e.lastname,validators:[_validationHelpers.required]},email:{label:s.formatMessage(messages.email),placeholder:s.formatMessage(messages.email),value:e.email,validators:[_validationHelpers.required,_validationHelpers.email]},accountType:{value:e.accountType,validators:[_validationHelpers.required],label:s.formatMessage(messages.accountTypeLabel),options:[{value:"individual",label:s.formatMessage(messages.accountTypeIndividual)},{value:"non-profit",label:s.formatMessage(messages.accountTypeNonProfit)},{value:"company",label:s.formatMessage(messages.accountTypeCompany)}]},organization:{label:s.formatMessage(messages.accountTypeCompany),placeholder:s.formatMessage(messages.accountTypeCompany),value:e.organization},oldPassword:{label:s.formatMessage(messages.currentPassword),type:"password",validators:[(0,_validationHelpers.minLength)(6)]},newPassword:{label:s.formatMessage(messages.newPassword),type:"password",validators:[(0,_validationHelpers.minLength)(6)]}}};return new _Form.default(a)}render(){const{user:e}=this.props.stores;if(e.getUserInfoRequest.isExecuting)return(0,_jsxRuntime.jsx)("div",{children:"Loading..."});const s=this.prepareForm(e.data);return(0,_jsxRuntime.jsx)(_ErrorBoundary.default,{children:(0,_jsxRuntime.jsx)(_EditUserForm.default,{status:e.actionStatus,form:s,isSaving:e.updateUserInfoRequest.isExecuting,onSubmit:e=>this.onSubmit(e)})})}}EditUserScreen.propTypes={stores:_propTypes.default.shape({user:_propTypes.default.instanceOf(_UserStore.default).isRequired}).isRequired,actions:_propTypes.default.shape({user:_propTypes.default.instanceOf(_UserStore.default).isRequired}).isRequired};var _default=(0,_reactIntl.injectIntl)((0,_mobxReact.inject)("stores","actions")((0,_mobxReact.observer)(EditUserScreen)));exports.default=_default;