"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _class,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_descriptor8,_electron=require("electron"),_mobx=require("mobx"),_lodash=require("lodash"),_ms=_interopRequireDefault(require("ms")),_fsExtra=require("fs-extra"),_path=require("path"),_Store=_interopRequireDefault(require("./lib/Store")),_Request=_interopRequireDefault(require("./lib/Request")),_CachedRequest=_interopRequireDefault(require("./lib/CachedRequest")),_routingHelpers=require("../helpers/routing-helpers"),_scheduleHelpers=require("../helpers/schedule-helpers"),_recipeHelpers=require("../helpers/recipe-helpers"),_workspaces=require("../features/workspaces"),_config=require("../config"),_languages=require("../i18n/languages"),_environmentRemote=require("../environment-remote");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _initializerDefineProperty(e,t,s,i){s&&Object.defineProperty(e,t,{enumerable:s.enumerable,configurable:s.configurable,writable:s.writable,value:s.initializer?s.initializer.call(i):void 0})}function _applyDecoratedDescriptor(e,t,s,i,r){var o={};return Object.keys(i).forEach((function(e){o[e]=i[e]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=s.slice().reverse().reduce((function(s,i){return i(e,t,s)||s}),o),r&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(r):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(e,t,o),o=null),o}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}const debug=require("debug")("Ferdi:ServiceStore");let ServicesStore=(_class=class extends _Store.default{constructor(...e){super(...e),_initializerDefineProperty(this,"allServicesRequest",_descriptor,this),_initializerDefineProperty(this,"createServiceRequest",_descriptor2,this),_initializerDefineProperty(this,"updateServiceRequest",_descriptor3,this),_initializerDefineProperty(this,"reorderServicesRequest",_descriptor4,this),_initializerDefineProperty(this,"deleteServiceRequest",_descriptor5,this),_initializerDefineProperty(this,"clearCacheRequest",_descriptor6,this),_initializerDefineProperty(this,"filterNeedle",_descriptor7,this),_initializerDefineProperty(this,"lastUsedServices",_descriptor8,this),this.serviceMaintenanceTick=(0,_lodash.debounce)((()=>{this._serviceMaintenance(),this.serviceMaintenanceTick(),debug("Service maintenance tick")}),(0,_ms.default)("10s")),this.actions.service.setActive.listen(this._setActive.bind(this)),this.actions.service.blurActive.listen(this._blurActive.bind(this)),this.actions.service.setActiveNext.listen(this._setActiveNext.bind(this)),this.actions.service.setActivePrev.listen(this._setActivePrev.bind(this)),this.actions.service.showAddServiceInterface.listen(this._showAddServiceInterface.bind(this)),this.actions.service.createService.listen(this._createService.bind(this)),this.actions.service.createFromLegacyService.listen(this._createFromLegacyService.bind(this)),this.actions.service.updateService.listen(this._updateService.bind(this)),this.actions.service.deleteService.listen(this._deleteService.bind(this)),this.actions.service.openRecipeFile.listen(this._openRecipeFile.bind(this)),this.actions.service.clearCache.listen(this._clearCache.bind(this)),this.actions.service.setWebviewReference.listen(this._setWebviewReference.bind(this)),this.actions.service.detachService.listen(this._detachService.bind(this)),this.actions.service.focusService.listen(this._focusService.bind(this)),this.actions.service.focusActiveService.listen(this._focusActiveService.bind(this)),this.actions.service.toggleService.listen(this._toggleService.bind(this)),this.actions.service.handleIPCMessage.listen(this._handleIPCMessage.bind(this)),this.actions.service.sendIPCMessage.listen(this._sendIPCMessage.bind(this)),this.actions.service.sendIPCMessageToAllServices.listen(this._sendIPCMessageToAllServices.bind(this)),this.actions.service.setUnreadMessageCount.listen(this._setUnreadMessageCount.bind(this)),this.actions.service.setDialogTitle.listen(this._setDialogTitle.bind(this)),this.actions.service.openWindow.listen(this._openWindow.bind(this)),this.actions.service.filter.listen(this._filter.bind(this)),this.actions.service.resetFilter.listen(this._resetFilter.bind(this)),this.actions.service.resetStatus.listen(this._resetStatus.bind(this)),this.actions.service.reload.listen(this._reload.bind(this)),this.actions.service.reloadActive.listen(this._reloadActive.bind(this)),this.actions.service.reloadAll.listen(this._reloadAll.bind(this)),this.actions.service.reloadUpdatedServices.listen(this._reloadUpdatedServices.bind(this)),this.actions.service.reorder.listen(this._reorder.bind(this)),this.actions.service.toggleNotifications.listen(this._toggleNotifications.bind(this)),this.actions.service.toggleAudio.listen(this._toggleAudio.bind(this)),this.actions.service.toggleDarkMode.listen(this._toggleDarkMode.bind(this)),this.actions.service.openDevTools.listen(this._openDevTools.bind(this)),this.actions.service.openDevToolsForActiveService.listen(this._openDevToolsForActiveService.bind(this)),this.actions.service.hibernate.listen(this._hibernate.bind(this)),this.actions.service.awake.listen(this._awake.bind(this)),this.actions.service.resetLastPollTimer.listen(this._resetLastPollTimer.bind(this)),this.actions.service.shareSettingsWithServiceProcess.listen(this._shareSettingsWithServiceProcess.bind(this)),this.registerReactions([this._focusServiceReaction.bind(this),this._getUnreadMessageCountReaction.bind(this),this._mapActiveServiceToServiceModelReaction.bind(this),this._saveActiveService.bind(this),this._logoutReaction.bind(this),this._handleMuteSettings.bind(this),this._checkForActiveService.bind(this)]),this._initializeServiceRecipeInWebview.bind(this)}setup(){(0,_mobx.reaction)((()=>this.stores.settings.app.enableSpellchecking),(()=>{this._shareSettingsWithServiceProcess()})),(0,_mobx.reaction)((()=>this.stores.settings.app.spellcheckerLanguage),(()=>{this._shareSettingsWithServiceProcess()})),(0,_mobx.reaction)((()=>this.stores.settings.app.darkMode),(()=>{this._shareSettingsWithServiceProcess()})),(0,_mobx.reaction)((()=>this.stores.settings.app.adaptableDarkMode),(()=>{this._shareSettingsWithServiceProcess()})),(0,_mobx.reaction)((()=>this.stores.settings.app.universalDarkMode),(()=>{this._shareSettingsWithServiceProcess()})),(0,_mobx.reaction)((()=>this.stores.settings.app.splitMode),(()=>{this._shareSettingsWithServiceProcess()})),(0,_mobx.reaction)((()=>this.stores.settings.app.splitColumns),(()=>{this._shareSettingsWithServiceProcess()})),(0,_mobx.reaction)((()=>this.stores.settings.app.searchEngine),(()=>{this._shareSettingsWithServiceProcess()})),(0,_mobx.reaction)((()=>this.stores.settings.app.clipboardNotifications),(()=>{this._shareSettingsWithServiceProcess()}))}initialize(){super.initialize(),this.serviceMaintenanceTick()}teardown(){super.teardown(),this.serviceMaintenanceTick.cancel()}_serviceMaintenance(){for(const e of this.enabled)e.isActive||(!e.lastHibernated&&Date.now()-e.lastUsed>(0,_ms.default)(`${this.stores.settings.all.app.hibernationStrategy}s`)&&this._hibernate({serviceId:e.id}),e.isWakeUpEnabled&&e.lastHibernated&&Number(this.stores.settings.all.app.wakeUpStrategy)>0&&Date.now()-e.lastHibernated>(0,_ms.default)(`${this.stores.settings.all.app.wakeUpStrategy}s`)&&this._awake({serviceId:e.id,automatic:!0})),e.lastPoll&&e.lastPoll-e.lastPollAnswer>(0,_ms.default)("1m")?e.isActive?(debug(`Service lost connection: ${e.name} (${e.id}).`),e.lostRecipeConnection=!0):this.stores.app.isOnline&&e.lostRecipeReloadAttempt<3&&(debug(`Reloading service: ${e.name} (${e.id}). Attempt: ${e.lostRecipeReloadAttempt}`),e.lostRecipeReloadAttempt+=1,e.lostRecipeConnection=!1):(e.lostRecipeConnection=!1,e.lostRecipeReloadAttempt=0)}get all(){if(this.stores.user.isLoggedIn){const e=this.allServicesRequest.execute().result;if(e)return(0,_mobx.observable)([...e].slice().sort(((e,t)=>e.order-t.order)).map(((e,t)=>(e.index=t,e))))}return[]}get enabled(){return this.all.filter((e=>e.isEnabled))}get allDisplayed(){const e=this.stores.settings.all.app.showDisabledServices?this.all:this.enabled;return _workspaces.workspaceStore.filterServicesByActiveWorkspace(e)}get allDisplayedUnordered(){const{showDisabledServices:e}=this.stores.settings.all.app,{keepAllWorkspacesLoaded:t}=this.stores.workspaces.settings,s=this.allServicesRequest.execute().result||[],i=e?s:s.filter((e=>e.isEnabled));let r;if(t)r=i;else{r=_workspaces.workspaceStore.filterServicesByActiveWorkspace(i);for(const e of this.stores.workspaces.workspaces)if(e.services.includes(_config.KEEP_WS_LOADED_USID)){const t=new Set(e.services.filter((e=>e!==_config.KEEP_WS_LOADED_USID))),s=i.filter((e=>t.has(e.id)));r=[...r,...s]}r=r.filter(((e,t,s)=>s.indexOf(e)===t))}return r}get filtered(){return this.all.filter((e=>e.name.toLowerCase().includes(this.filterNeedle.toLowerCase())))}get active(){return this.all.find((e=>e.isActive))}get activeSettings(){const e=(0,_routingHelpers.matchRoute)("/settings/services/edit/:id",this.stores.router.location.pathname);if(e){const t=this.one(e.id);if(t)return t;debug("Service not available")}return null}get isTodosServiceAdded(){return this.allDisplayed.find((e=>e.isTodosService&&e.isEnabled))||!1}get isTodosServiceActive(){return this.active&&this.active.isTodosService}one(e){return this.all.find((t=>t.id===e))}async _showAddServiceInterface({recipeId:e}){this.stores.router.push(`/settings/services/add/${e}`)}async _createService({recipeId:e,serviceData:t,redirect:s=!0,skipCleanup:i=!1}){this.stores.recipes.isInstalled(e)||(debug(`Recipe "${e}" is not installed, installing recipe`),await this.stores.recipes._install({recipeId:e}),debug(`Recipe "${e}" installed`)),t={isEnabled:_config.DEFAULT_SERVICE_SETTINGS.isEnabled,isHibernationEnabled:_config.DEFAULT_SERVICE_SETTINGS.isHibernationEnabled,isWakeUpEnabled:_config.DEFAULT_SERVICE_SETTINGS.isWakeUpEnabled,isNotificationEnabled:_config.DEFAULT_SERVICE_SETTINGS.isNotificationEnabled,isBadgeEnabled:_config.DEFAULT_SERVICE_SETTINGS.isBadgeEnabled,isMuted:_config.DEFAULT_SERVICE_SETTINGS.isMuted,customIcon:_config.DEFAULT_SERVICE_SETTINGS.customIcon,isDarkModeEnabled:_config.DEFAULT_SERVICE_SETTINGS.isDarkModeEnabled,spellcheckerLanguage:_languages.SPELLCHECKER_LOCALES[this.stores.settings.app.spellcheckerLanguage],userAgentPref:"",...t};const r=i?t:this._cleanUpTeamIdAndCustomUrl(e,t),o=await this.createServiceRequest.execute(e,r)._promise;this.allServicesRequest.patch((e=>{e&&e.push(o.data)})),this.actions.settings.update({type:"proxy",data:{[`${o.data.id}`]:r.proxy}}),this.actionStatus=o.status||[],s&&this.stores.router.push("/settings/recipes")}async _createFromLegacyService({data:e}){const{id:t}=e.recipe,s={};e.name&&(s.name=e.name),e.team&&(e.customURL?s.customUrl=e.team:s.team=e.team),this.actions.service.createService({recipeId:t,serviceData:s,redirect:!1})}async _updateService({serviceId:e,serviceData:t,redirect:s=!0}){const i=this.one(e),r=this._cleanUpTeamIdAndCustomUrl(i.recipe.id,t),o=this.updateServiceRequest.execute(e,r),c=t;t.iconFile&&(await o._promise,c.iconUrl=o.result.data.iconUrl,c.hasCustomUploadedIcon=!0),this.allServicesRequest.patch((t=>{t&&("delete"===r.customIcon&&(c.iconUrl="",c.hasCustomUploadedIcon=!1),r.customIconUrl&&(c.iconUrl=r.customIconUrl),Object.assign(t.find((t=>t.id===e)),c))})),await o._promise,this.actionStatus=o.result.status,i.isEnabled&&this._sendIPCMessage({serviceId:e,channel:"service-settings-update",args:c}),this.actions.settings.update({type:"proxy",data:{[`${e}`]:r.proxy}}),s&&this.stores.router.push("/settings/services")}async _deleteService({serviceId:e,redirect:t}){const s=this.deleteServiceRequest.execute(e);t&&this.stores.router.push(t),this.allServicesRequest.patch((t=>{(0,_lodash.remove)(t,(t=>t.id===e))})),await s._promise,this.actionStatus=s.result.status}async _openRecipeFile({recipe:e,file:t}){const s=(0,_recipeHelpers.getRecipeDirectory)(e),i=(0,_recipeHelpers.getDevRecipeDirectory)(e);let r;if((0,_fsExtra.pathExistsSync)(s))r=s;else{if(!(0,_fsExtra.pathExistsSync)(i))return;r=i}const o=(0,_path.join)(r,t);"user.js"===t?(0,_fsExtra.pathExistsSync)(o)||(0,_fsExtra.writeFileSync)(o,'module.exports = (config, Ferdi) => {\n  // Write your scripts here\n  console.log("Hello, World!", config);\n};\n'):(0,_fsExtra.ensureFileSync)(o),_electron.shell.showItemInFolder(o)}async _clearCache({serviceId:e}){this.clearCacheRequest.reset();const t=this.clearCacheRequest.execute(e);await t._promise}_setActive({serviceId:e,keepActiveRoute:t=null}){t||this.stores.router.push("/");const s=this.one(e);for(const e of this.all)e.isActive&&(e.lastUsed=Date.now(),e.isActive=!1);s.isActive=!0,this._awake({serviceId:s.id}),this.isTodosServiceActive&&!this.stores.todos.settings.isFeatureEnabledByUser&&this.actions.todos.toggleTodosFeatureVisibility(),this.lastUsedServices=this.lastUsedServices.filter((t=>t!==e)),this.lastUsedServices.unshift(e),this._focusActiveService()}_blurActive(){const e=this.active;e?e.isActive=!1:debug("No service is active")}_setActiveNext(){const e=this._wrapIndex(this.allDisplayed.findIndex((e=>e.isActive)),1,this.allDisplayed.length);this._setActive({serviceId:this.allDisplayed[e].id})}_setActivePrev(){const e=this._wrapIndex(this.allDisplayed.findIndex((e=>e.isActive)),-1,this.allDisplayed.length);this._setActive({serviceId:this.allDisplayed[e].id})}_setUnreadMessageCount({serviceId:e,count:t}){const s=this.one(e);s.unreadDirectMessageCount=t.direct,s.unreadIndirectMessageCount=t.indirect}_setDialogTitle({serviceId:e,dialogTitle:t}){this.one(e).dialogTitle=t}_setWebviewReference({serviceId:e,webview:t}){const s=this.one(e);s&&(s.webview=t,s.isAttached||(debug("Webview is not attached, initializing"),s.initializeWebViewEvents({handleIPCMessage:this.actions.service.handleIPCMessage,openWindow:this.actions.service.openWindow,stores:this.stores}),s.initializeWebViewListener()),s.isAttached=!0)}_detachService({service:e}){e.webview=null,e.isAttached=!1}_focusService({serviceId:e}){const t=this.one(e);t.webview&&(t.webview.blur(),t.webview.focus())}_focusActiveService(e=null){if(this.stores.user.isLoggedIn){const t=this.active;t?t._webview&&(document.title=`Ferdi - ${t.name} ${t.dialogTitle?` - ${t.dialogTitle}`:""} ${t._webview?`- ${t._webview.getTitle()}`:""}`,this._focusService({serviceId:t.id}),this.stores.settings.app.splitMode&&!e&&setTimeout((()=>{document.querySelector(".services__webview-wrapper.is-active").scrollIntoView({behavior:"smooth",block:"end",inline:"nearest"})}),10)):debug("No service is active")}else this.allServicesRequest.invalidate()}_toggleService({serviceId:e}){const t=this.one(e);t.isEnabled=!t.isEnabled}_handleIPCMessage({serviceId:e,channel:t,args:s}){const i=this.one(e);switch(t){case"hello":debug("Received hello event from",e),this._initRecipePolling(i.id),this._initializeServiceRecipeInWebview(e),this._shareSettingsWithServiceProcess();break;case"alive":i.lastPollAnswer=Date.now();break;case"message-counts":debug(`Received unread message info from '${e}'`,s[0]),this.actions.service.setUnreadMessageCount({serviceId:e,count:{direct:s[0].direct,indirect:s[0].indirect}});break;case"active-dialog-title":debug(`Received active dialog title from '${e}'`,s[0]),this.actions.service.setDialogTitle({serviceId:e,dialogTitle:s[0]});break;case"notification":{const{options:t}=s[0],{scheduledDNDEnabled:r,scheduledDNDStart:o,scheduledDNDEnd:c}=this.stores.settings.all.app;if(r&&(0,_scheduleHelpers.isInTimeframe)(o,c))return;if((i.recipe.hasNotificationSound||i.isMuted||this.stores.settings.all.app.isAppMuted)&&Object.assign(t,{silent:!0}),i.isNotificationEnabled){let r=`Notification from ${i.name}`;this.stores.settings.all.app.privateNotifications?(t.body="",t.icon="/assets/img/notification-badge.gif"):(t.body="string"==typeof t.body?t.body:"",r="string"==typeof s[0].title?s[0].title:i.name),this.actions.app.notify({notificationId:s[0].notificationId,title:r,options:t,serviceId:e})}break}case"avatar":{const t=s[0];i.iconUrl===t||i.hasCustomUploadedIcon||(i.customIconUrl=t,this.actions.service.updateService({serviceId:e,serviceData:{customIconUrl:t},redirect:!1}));break}case"new-window":{const e=s[0];this.actions.app.openExternalUrl({url:e});break}case"set-service-spellchecker-language":s?this.actions.service.updateService({serviceId:e,serviceData:{spellcheckerLanguage:"reset"===s[0]?"":s[0]},redirect:!1}):console.warn("Did not receive locale");break;case"feature:todos":Object.assign(s[0].data,{serviceId:e}),this.actions.todos.handleHostMessage(s[0])}}_sendIPCMessage({serviceId:e,channel:t,args:s}){const i=this.one(e),r=JSON.parse(JSON.stringify(s));i.webview&&i.webview.send(t,r)}_sendIPCMessageToAllServices({channel:e,args:t}){for(const s of this.all)this.actions.service.sendIPCMessage({serviceId:s.id,channel:e,args:t})}_openWindow({event:e}){"about:blank"!==e.url&&(e.preventDefault(),this.actions.app.openExternalUrl({url:e.url}))}_filter({needle:e}){this.filterNeedle=e}_resetFilter(){this.filterNeedle=null}_resetStatus(){this.actionStatus=[]}_reload({serviceId:e}){const t=this.one(e);if(t.isEnabled){if(t.resetMessageCount(),t.lostRecipeConnection=!1,t.isTodosService)return this.actions.todos.reload();if(t.webview)return t.webview.loadURL(t.url)}}_reloadActive(){const e=this.active;e?this._reload({serviceId:e.id}):debug("No service is active")}_reloadAll(){for(const e of this.enabled)this._reload({serviceId:e.id})}_reloadUpdatedServices(){this._reloadAll(),this.actions.ui.toggleServiceUpdatedInfoBar({visible:!1})}_reorder(e){const{workspaces:t}=this.stores;t.isAnyWorkspaceActive?t.reorderServicesOfActiveWorkspace(e):this._reorderService(e)}_reorderService({oldIndex:e,newIndex:t}){const{showDisabledServices:s}=this.stores.settings.all.app,i=s?e:this.all.indexOf(this.enabled[e]),r=s?t:this.all.indexOf(this.enabled[t]);this.all.splice(r,0,this.all.splice(i,1)[0]);const o={};for(const[e]of this.all.entries())o[this.all[e].id]=e;this.reorderServicesRequest.execute(o),this.allServicesRequest.patch((e=>{for(const t of e){t.order=o[t.id]}}))}_toggleNotifications({serviceId:e}){const t=this.one(e);this.actions.service.updateService({serviceId:e,serviceData:{isNotificationEnabled:!t.isNotificationEnabled},redirect:!1})}_toggleAudio({serviceId:e}){const t=this.one(e);this.actions.service.updateService({serviceId:e,serviceData:{isMuted:!t.isMuted},redirect:!1})}_toggleDarkMode({serviceId:e}){const t=this.one(e);this.actions.service.updateService({serviceId:e,serviceData:{isDarkModeEnabled:!t.isDarkModeEnabled},redirect:!1})}_openDevTools({serviceId:e}){const t=this.one(e);t.isTodosService?this.actions.todos.openDevTools():t.webview&&t.webview.openDevTools()}_openDevToolsForActiveService(){const e=this.active;e?this._openDevTools({serviceId:e.id}):debug("No service is active")}_hibernate({serviceId:e}){const t=this.one(e);t.canHibernate&&(debug(`Hibernate ${t.name}`),t.isHibernationRequested=!0,t.lastHibernated=Date.now())}_awake({serviceId:e,automatic:t}){const s=Date.now(),i=this.one(e);if(debug(`Waking up${t?" automatically ":" "}from service hibernation for ${i.name}`),t){const e=this.stores.settings.all.app.hibernationStrategy;let t=this.stores.settings.all.app.wakeUpHibernationStrategy;debug(`wakeUpHibernationStrategy = ${t}`),debug(`hibernationStrategy = ${e}`),(!t||t<1)&&(t=this.stores.settings.all.app.hibernationStrategy);let r=0;this.stores.settings.all.app.wakeUpHibernationSplay&&Math.random()>=.5?(r=10,debug("Added splay")):debug("skipping splay"),i.lastUsed=s-(0,_ms.default)(e-(t+r)+"s")}else i.lastUsed=s;debug(`Setting service.lastUsed to ${i.lastUsed} (${(s-i.lastUsed)/1e3}s ago)`),i.isHibernationRequested=!1,i.lastHibernated=null}_resetLastPollTimer({serviceId:e=null}){debug("Reset last poll timer for "+(e?`service: "${e}"`:"all services"));const t=e=>{e.lastPollAnswer=Date.now(),e.lastPoll=Date.now()};if(e){const s=this.one(e);s&&t(s)}else for(const e of this.allDisplayed)t(e)}_focusServiceReaction(){const e=this.active;e?(this.actions.service.focusService({serviceId:e.id}),document.title=`Ferdi - ${e.name} ${e.dialogTitle?` - ${e.dialogTitle}`:""} ${e._webview?`- ${e._webview.getTitle()}`:""}`):debug("No service is active")}_saveActiveService(){const e=this.active;e?this.actions.settings.update({type:"service",data:{activeService:e.id}}):debug("No service is active")}_mapActiveServiceToServiceModelReaction(){const{activeService:e}=this.stores.settings.all.service;this.allDisplayed.length>0&&this.allDisplayed.map((t=>Object.assign(t,{isActive:e?e===t.id:this.allDisplayed[0].id===t.id})))}_getUnreadMessageCountReaction(){const{showMessageBadgeWhenMuted:e}=this.stores.settings.all.app,{showMessageBadgesEvenWhenMuted:t}=this.stores.ui,s=this.allDisplayed.filter((s=>(e||s.isNotificationEnabled)&&t&&s.isBadgeEnabled)).map((e=>e.unreadDirectMessageCount)).reduce(((e,t)=>e+t),0),i=this.allDisplayed.filter((s=>e&&t&&s.isBadgeEnabled&&s.isIndirectMessageBadgeEnabled)).map((e=>e.unreadIndirectMessageCount)).reduce(((e,t)=>e+t),0);t&&this.actions.app.setBadge({unreadDirectMessageCount:s,unreadIndirectMessageCount:i})}_logoutReaction(){this.stores.user.isLoggedIn||(this.actions.settings.remove({type:"service",key:"activeService"}),this.allServicesRequest.invalidate().reset())}_handleMuteSettings(){const{enabled:e}=this,{isAppMuted:t}=this.stores.settings.app;for(const s of e){const{isAttached:e}=s,i=t||s.isMuted;e&&s.webview&&(s.webview.audioMuted=i)}}_shareSettingsWithServiceProcess(){const e={...this.stores.settings.app,isDarkThemeActive:this.stores.ui.isDarkThemeActive};this.actions.service.sendIPCMessageToAllServices({channel:"settings-update",args:e})}_cleanUpTeamIdAndCustomUrl(e,t){const s=t,i=this.stores.recipes.one(e);if(i)return i.hasTeamId&&i.hasCustomUrl&&t.team&&t.customUrl&&delete s.team,s}_checkForActiveService(){this.stores.router.location&&!this.stores.router.location.pathname.includes("auth/signup")&&-1===this.allDisplayed.findIndex((e=>e.isActive))&&this.allDisplayed.length>0&&(debug("No active service found, setting active service to index 0"),this._setActive({serviceId:this.allDisplayed[0].id}))}_initializeServiceRecipeInWebview(e){const t=this.one(e);if(t.webview){const e=JSON.parse(JSON.stringify(t.shareWithWebview));debug("Initialize recipe",t.recipe.id,t.name),t.webview.send("initialize-recipe",{...e,franzVersion:_environmentRemote.ferdiVersion},t.recipe)}}_initRecipePolling(e){const t=this.one(e),s=(0,_ms.default)("2s");if(t){null!==t.timer&&clearTimeout(t.timer);const e=()=>{t.webview&&(t.webview.send("poll"),t.timer=setTimeout(e,s),t.lastPoll=Date.now())};e()}}_wrapIndex(e,t,s){return((e+t)%s+s)%s}},_descriptor=_applyDecoratedDescriptor(_class.prototype,"allServicesRequest",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _CachedRequest.default(this.api.services,"all")}}),_descriptor2=_applyDecoratedDescriptor(_class.prototype,"createServiceRequest",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _Request.default(this.api.services,"create")}}),_descriptor3=_applyDecoratedDescriptor(_class.prototype,"updateServiceRequest",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _Request.default(this.api.services,"update")}}),_descriptor4=_applyDecoratedDescriptor(_class.prototype,"reorderServicesRequest",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _Request.default(this.api.services,"reorder")}}),_descriptor5=_applyDecoratedDescriptor(_class.prototype,"deleteServiceRequest",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _Request.default(this.api.services,"delete")}}),_descriptor6=_applyDecoratedDescriptor(_class.prototype,"clearCacheRequest",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _Request.default(this.api.services,"clearCache")}}),_descriptor7=_applyDecoratedDescriptor(_class.prototype,"filterNeedle",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),_descriptor8=_applyDecoratedDescriptor(_class.prototype,"lastUsedServices",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),_applyDecoratedDescriptor(_class.prototype,"all",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"all"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"enabled",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"enabled"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"allDisplayed",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"allDisplayed"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"allDisplayedUnordered",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"allDisplayedUnordered"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"filtered",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"filtered"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"active",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"active"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"activeSettings",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"activeSettings"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"isTodosServiceAdded",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"isTodosServiceAdded"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"isTodosServiceActive",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"isTodosServiceActive"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_createFromLegacyService",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_createFromLegacyService"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_updateService",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_updateService"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_deleteService",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_deleteService"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_openRecipeFile",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_openRecipeFile"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_clearCache",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_clearCache"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_setActive",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_setActive"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_blurActive",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_blurActive"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_setActiveNext",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_setActiveNext"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_setActivePrev",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_setActivePrev"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_setUnreadMessageCount",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_setUnreadMessageCount"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_setDialogTitle",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_setDialogTitle"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_setWebviewReference",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_setWebviewReference"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_detachService",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_detachService"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_focusService",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_focusService"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_focusActiveService",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_focusActiveService"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_toggleService",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_toggleService"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_handleIPCMessage",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_handleIPCMessage"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_sendIPCMessage",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_sendIPCMessage"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_sendIPCMessageToAllServices",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_sendIPCMessageToAllServices"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_openWindow",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_openWindow"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_filter",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_filter"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_resetFilter",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_resetFilter"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_resetStatus",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_resetStatus"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_reload",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_reload"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_reloadActive",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_reloadActive"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_reloadAll",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_reloadAll"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_reloadUpdatedServices",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_reloadUpdatedServices"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_reorder",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_reorder"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_reorderService",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_reorderService"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_toggleNotifications",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_toggleNotifications"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_toggleAudio",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_toggleAudio"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_toggleDarkMode",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_toggleDarkMode"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_openDevTools",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_openDevTools"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_openDevToolsForActiveService",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_openDevToolsForActiveService"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_hibernate",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_hibernate"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_awake",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_awake"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_resetLastPollTimer",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_resetLastPollTimer"),_class.prototype),_class);exports.default=ServicesStore;