"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _class,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_descriptor8,_descriptor9,_descriptor10,_descriptor11,_descriptor12,_descriptor13,_descriptor14,_descriptor15,_electron=require("electron"),_remote=require("@electron/remote"),_mobx=require("mobx"),_moment=_interopRequireDefault(require("moment")),_autoLaunch=_interopRequireDefault(require("auto-launch")),_ms=_interopRequireDefault(require("ms")),_url=require("url"),_fsExtra=require("fs-extra"),_Store=_interopRequireDefault(require("./lib/Store")),_Request=_interopRequireDefault(require("./lib/Request")),_config=require("../config"),_environment=require("../environment"),_environmentRemote=require("../environment-remote"),_translations=require("../i18n/translations"),_i18nHelpers=require("../helpers/i18n-helpers"),_serviceHelpers=require("../helpers/service-helpers"),_urlHelpers=require("../helpers/url-helpers"),_asyncHelpers=require("../helpers/async-helpers");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _initializerDefineProperty(e,t,i,s){i&&Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(s):void 0})}function _applyDecoratedDescriptor(e,t,i,s,r){var a={};return Object.keys(s).forEach((function(e){a[e]=s[e]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=i.slice().reverse().reduce((function(i,s){return s(e,t,i)||i}),a),r&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(r):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function _initializerWarningHelper(e,t){throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.")}const debug=require("debug")("Ferdi:AppStore"),mainWindow=(0,_remote.getCurrentWindow)(),executablePath="/usr/bin/ferdi",autoLauncher=new _autoLaunch.default({name:"Ferdi",path:executablePath}),CATALINA_NOTIFICATION_HACK_KEY="_temp_askedForCatalinaNotificationPermissions",locales=(0,_translations.generatedTranslations)();let AppStore=(_class=class extends _Store.default{constructor(...e){super(...e),this.updateStatusTypes={CHECKING:"CHECKING",AVAILABLE:"AVAILABLE",NOT_AVAILABLE:"NOT_AVAILABLE",DOWNLOADED:"DOWNLOADED",FAILED:"FAILED"},_initializerDefineProperty(this,"healthCheckRequest",_descriptor,this),_initializerDefineProperty(this,"getAppCacheSizeRequest",_descriptor2,this),_initializerDefineProperty(this,"clearAppCacheRequest",_descriptor3,this),_initializerDefineProperty(this,"autoLaunchOnStart",_descriptor4,this),_initializerDefineProperty(this,"isOnline",_descriptor5,this),_initializerDefineProperty(this,"authRequestFailed",_descriptor6,this),_initializerDefineProperty(this,"timeSuspensionStart",_descriptor7,this),_initializerDefineProperty(this,"timeOfflineStart",_descriptor8,this),_initializerDefineProperty(this,"updateStatus",_descriptor9,this),_initializerDefineProperty(this,"locale",_descriptor10,this),_initializerDefineProperty(this,"isSystemMuteOverridden",_descriptor11,this),_initializerDefineProperty(this,"isSystemDarkModeEnabled",_descriptor12,this),_initializerDefineProperty(this,"isClearingAllCache",_descriptor13,this),_initializerDefineProperty(this,"isFullScreen",_descriptor14,this),_initializerDefineProperty(this,"isFocused",_descriptor15,this),this.dictionaries=[],this.fetchDataInterval=null,this.actions.app.notify.listen(this._notify.bind(this)),this.actions.app.setBadge.listen(this._setBadge.bind(this)),this.actions.app.launchOnStartup.listen(this._launchOnStartup.bind(this)),this.actions.app.openExternalUrl.listen(this._openExternalUrl.bind(this)),this.actions.app.checkForUpdates.listen(this._checkForUpdates.bind(this)),this.actions.app.installUpdate.listen(this._installUpdate.bind(this)),this.actions.app.resetUpdateStatus.listen(this._resetUpdateStatus.bind(this)),this.actions.app.healthCheck.listen(this._healthCheck.bind(this)),this.actions.app.muteApp.listen(this._muteApp.bind(this)),this.actions.app.toggleMuteApp.listen(this._toggleMuteApp.bind(this)),this.actions.app.clearAllCache.listen(this._clearAllCache.bind(this)),this.registerReactions([this._offlineCheck.bind(this),this._setLocale.bind(this),this._muteAppHandler.bind(this),this._handleFullScreen.bind(this),this._handleLogout.bind(this)])}async setup(){this._appStartsCounter(),window.addEventListener("focus",this.actions.service.focusActiveService),window.addEventListener("online",(()=>{this.isOnline=!0})),window.addEventListener("offline",(()=>{this.isOnline=!1})),mainWindow.on("enter-full-screen",(()=>{this.isFullScreen=!0})),mainWindow.on("leave-full-screen",(()=>{this.isFullScreen=!1})),this.isOnline=navigator.onLine,this._autoStart(),this._systemDND(),setInterval((()=>this._systemDND()),(0,_ms.default)("5s")),this.fetchDataInterval=setInterval((()=>{this.stores.user.getUserInfoRequest.invalidate({immediately:!0}),this.stores.features.featuresRequest.invalidate({immediately:!0})}),(0,_ms.default)("60m")),setInterval((()=>this._checkForUpdates()),_config.CHECK_INTERVAL),setTimeout((()=>this._checkForUpdates()),(0,_ms.default)("30s")),_electron.ipcRenderer.on("autoUpdate",((e,t)=>{this.updateStatus!==this.updateStatusTypes.FAILED&&(t.available&&(this.updateStatus=this.updateStatusTypes.AVAILABLE,_environment.isMac&&this.stores.settings.app.automaticUpdates&&_remote.app.dock.bounce()),void 0===t.available||t.available||(this.updateStatus=this.updateStatusTypes.NOT_AVAILABLE),t.downloaded&&(this.updateStatus=this.updateStatusTypes.DOWNLOADED,_environment.isMac&&this.stores.settings.app.automaticUpdates&&_remote.app.dock.bounce()),t.error&&(t.error.message&&t.error.message.startsWith("404")?(this.updateStatus=this.updateStatusTypes.NOT_AVAILABLE,console.warn("Updater warning: there seems to be unpublished pre-release(s) available on GitHub",t.error)):(console.error("Updater error:",t.error),this.updateStatus=this.updateStatusTypes.FAILED)))})),_electron.ipcRenderer.on("navigateFromDeepLink",((e,t)=>{debug("Navigate from deep link",t);let{url:i}=t;i&&(i=i.replace(/\/$/,""),this.stores.router.push(i))})),_electron.ipcRenderer.on("muteApp",(()=>{this._toggleMuteApp()})),this.locale=this._getDefaultLocale(),setTimeout((()=>{this._healthCheck()}),1e3),this.isSystemDarkModeEnabled=_remote.nativeTheme.shouldUseDarkColors,_electron.ipcRenderer.on("isWindowFocused",((e,t)=>{debug("Setting is focused to",t),this.isFocused=t})),_remote.powerMonitor.on("suspend",(()=>{debug("System suspended starting timer"),this.timeSuspensionStart=(0,_moment.default)()})),_remote.powerMonitor.on("resume",(()=>{debug("System resumed, last suspended on",this.timeSuspensionStart),this.actions.service.resetLastPollTimer(),this.timeSuspensionStart.add(10,"m").isBefore((0,_moment.default)())&&this.stores.settings.app.get("reloadAfterResume")&&(debug("Reloading services, user info and features"),setInterval((()=>{debug("Reload app interval is starting"),this.isOnline&&window.location.reload()}),(0,_ms.default)("2s")))})),_environment.isMac&&!localStorage.getItem(CATALINA_NOTIFICATION_HACK_KEY)&&(debug("Triggering macOS Catalina notification permission trigger"),new window.Notification("Welcome to Ferdi 5",{body:"Have a wonderful day & happy messaging."}),localStorage.setItem(CATALINA_NOTIFICATION_HACK_KEY,"true"))}get cacheSize(){return this.getAppCacheSizeRequest.execute().result}get debugInfo(){const e=JSON.parse(JSON.stringify(this.stores.settings.app));return e.lockedPassword="******",{host:{platform:process.platform,release:_environment.osRelease,screens:_remote.screen.getAllDisplays()},ferdi:{version:_environmentRemote.ferdiVersion,electron:_environment.electronVersion,installedRecipes:this.stores.recipes.all.map((e=>({id:e.id,version:e.version}))),devRecipes:this.stores.recipePreviews.dev.map((e=>({id:e.id,version:e.version}))),services:this.stores.services.all.map((e=>({id:e.id,recipe:e.recipe.id,isAttached:e.isAttached,isActive:e.isActive,isEnabled:e.isEnabled,isHibernating:e.isHibernating,hasCrashed:e.hasCrashed,isDarkModeEnabled:e.isDarkModeEnabled}))),messages:this.stores.globalError.messages,workspaces:this.stores.workspaces.workspaces.map((e=>({id:e.id,services:e.services}))),windowSettings:(0,_fsExtra.readJsonSync)((0,_environmentRemote.userDataPath)("window-state.json")),settings:e,features:this.stores.features.features,user:this.stores.user.data.id}}}_notify({title:e,options:t,notificationId:i,serviceId:s=null}){if(this.stores.settings.all.app.isAppMuted)return;t.icon&&t.icon.startsWith("blob:")&&delete t.icon;const r=new window.Notification(e,t);debug("New notification",e,t),r.addEventListener("click",(()=>{s&&(this.actions.service.sendIPCMessage({channel:`notification-onclick:${i}`,args:{},serviceId:s}),this.actions.service.setActive({serviceId:s}),mainWindow.isVisible()||mainWindow.show(),mainWindow.isMinimized()&&mainWindow.restore(),mainWindow.focus(),debug("Notification click handler"))}))}_setBadge({unreadDirectMessageCount:e,unreadIndirectMessageCount:t}){let i=e;i=0===i&&0!==t?"â€¢":0===e&&0===t?0:Number.parseInt(i,10),_electron.ipcRenderer.send("updateAppIndicator",{indicator:i})}_launchOnStartup({enable:e}){this.autoLaunchOnStart=e;try{e?(debug("enabling launch on startup",executablePath),autoLauncher.enable()):(debug("disabling launch on startup"),autoLauncher.disable())}catch(e){console.warn(e)}}_openExternalUrl({url:e}){(0,_urlHelpers.openExternalUrl)(new _url.URL(e))}_checkForUpdates(){this.isOnline&&this.stores.settings.app.automaticUpdates&&(_environment.isMac||_environment.isWindows||process.env.APPIMAGE)&&(debug("_checkForUpdates: sending event to autoUpdate:check"),this.updateStatus=this.updateStatusTypes.CHECKING,_electron.ipcRenderer.send("autoUpdate",{action:"check"})),this.isOnline&&this.stores.settings.app.automaticUpdates&&this.actions.recipe.update()}_installUpdate(){debug("_installUpdate: sending event to autoUpdate:install"),_electron.ipcRenderer.send("autoUpdate",{action:"install"})}_resetUpdateStatus(){this.updateStatus=""}_healthCheck(){this.healthCheckRequest.execute()}_muteApp({isMuted:e,overrideSystemMute:t=!0}){this.isSystemMuteOverridden=t,this.actions.settings.update({type:"app",data:{isAppMuted:e}})}_toggleMuteApp(){this._muteApp({isMuted:!this.stores.settings.all.app.isAppMuted})}async _clearAllCache(){this.isClearingAllCache=!0;const e=this.clearAppCacheRequest.execute(),t=(await(0,_serviceHelpers.getServiceIdsFromPartitions)()).filter((e=>!this.stores.services.all.some((t=>e.replace("service-","")===t.id))));try{await Promise.all(t.map((e=>(0,_serviceHelpers.removeServicePartitionDirectory)(e))))}catch(e){console.log("Error while deleting service partition directory -",e)}await Promise.all(this.stores.services.all.map((e=>this.actions.service.clearCache({serviceId:e.id})))),await e._promise,await(0,_asyncHelpers.sleep)((0,_ms.default)("1s")),this.getAppCacheSizeRequest.execute(),this.isClearingAllCache=!1}_offlineCheck(){if(this.isOnline){(0,_moment.default)().diff(this.timeOfflineStart)>(0,_ms.default)("30m")&&this.actions.service.reloadAll()}else this.timeOfflineStart=(0,_moment.default)()}_setLocale(){this.stores.user.isLoggedIn&&this.stores.user.data.locale?this.locale=this.stores.user.data.locale:this.locale||(this.locale=this._getDefaultLocale()),_moment.default.locale(this.locale),debug(`Set locale to "${this.locale}"`)}_getDefaultLocale(){return(0,_i18nHelpers.getLocale)({locale:_environmentRemote.ferdiLocale,locales:locales,fallbackLocale:_config.DEFAULT_APP_SETTINGS.fallbackLocale})}_muteAppHandler(){const{showMessageBadgesEvenWhenMuted:e}=this.stores.ui;e||this.actions.app.setBadge({unreadDirectMessageCount:0,unreadIndirectMessageCount:0})}_handleFullScreen(){const e=document.querySelector("body");e&&(this.isFullScreen?e.classList.add("isFullScreen"):e.classList.remove("isFullScreen"))}_handleLogout(){this.stores.user.isLoggedIn||clearInterval(this.fetchDataInterval)}_appStartsCounter(){this.actions.settings.update({type:"stats",data:{appStarts:(this.stores.settings.all.stats.appStarts||0)+1}})}async _autoStart(){this.autoLaunchOnStart=await this._checkAutoStart(),1===this.stores.settings.all.stats.appStarts&&(debug("Set app to launch on start"),this.actions.app.launchOnStartup({enable:!0}))}async _checkAutoStart(){return autoLauncher.isEnabled()||!1}async _systemDND(){debug("Checking if Do Not Disturb Mode is on");const e=await _electron.ipcRenderer.invoke("get-dnd");debug("Do not disturb mode is",e),e===this.stores.settings.all.app.isAppMuted||this.isSystemMuteOverridden||this.actions.app.muteApp({isMuted:e,overrideSystemMute:!1})}},_descriptor=_applyDecoratedDescriptor(_class.prototype,"healthCheckRequest",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _Request.default(this.api.app,"health")}}),_descriptor2=_applyDecoratedDescriptor(_class.prototype,"getAppCacheSizeRequest",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _Request.default(this.api.local,"getAppCacheSize")}}),_descriptor3=_applyDecoratedDescriptor(_class.prototype,"clearAppCacheRequest",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _Request.default(this.api.local,"clearCache")}}),_descriptor4=_applyDecoratedDescriptor(_class.prototype,"autoLaunchOnStart",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_descriptor5=_applyDecoratedDescriptor(_class.prototype,"isOnline",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return navigator.onLine}}),_descriptor6=_applyDecoratedDescriptor(_class.prototype,"authRequestFailed",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor7=_applyDecoratedDescriptor(_class.prototype,"timeSuspensionStart",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return(0,_moment.default)()}}),_descriptor8=_applyDecoratedDescriptor(_class.prototype,"timeOfflineStart",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),_descriptor9=_applyDecoratedDescriptor(_class.prototype,"updateStatus",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),_descriptor10=_applyDecoratedDescriptor(_class.prototype,"locale",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return _environmentRemote.ferdiLocale}}),_descriptor11=_applyDecoratedDescriptor(_class.prototype,"isSystemMuteOverridden",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor12=_applyDecoratedDescriptor(_class.prototype,"isSystemDarkModeEnabled",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor13=_applyDecoratedDescriptor(_class.prototype,"isClearingAllCache",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),_descriptor14=_applyDecoratedDescriptor(_class.prototype,"isFullScreen",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return mainWindow.isFullScreen()}}),_descriptor15=_applyDecoratedDescriptor(_class.prototype,"isFocused",[_mobx.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_applyDecoratedDescriptor(_class.prototype,"cacheSize",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"cacheSize"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"debugInfo",[_mobx.computed],Object.getOwnPropertyDescriptor(_class.prototype,"debugInfo"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_notify",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_notify"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_setBadge",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_setBadge"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_launchOnStartup",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_launchOnStartup"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_openExternalUrl",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_openExternalUrl"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_checkForUpdates",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_checkForUpdates"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_installUpdate",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_installUpdate"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_resetUpdateStatus",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_resetUpdateStatus"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_healthCheck",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_healthCheck"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_muteApp",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_muteApp"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_toggleMuteApp",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_toggleMuteApp"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"_clearAllCache",[_mobx.action],Object.getOwnPropertyDescriptor(_class.prototype,"_clearAllCache"),_class.prototype),_class);exports.default=AppStore;